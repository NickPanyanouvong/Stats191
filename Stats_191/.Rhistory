current_score_dif <- min(previous_results$score_dif)
no_zeros <- filter(probs_by_cutoff,residuals>0)
for(j in 1:1000) {
score_difs <- append(score_difs,current_score_dif)
for(i in 1:nrow(no_zeros)) {
chance_winning <- append(chance_winning,no_zeros[i,2] * piecewise_predict(
current_score_dif, no_zeros[i,1])
)
}
current_score_dif <- current_score_dif + score_step_size
}
chance_winning <- c()
score_difs <- c()
score_step_size <- (max(previous_results$score_dif)
- min(previous_results$score_dif))/100
current_score_dif <- min(previous_results$score_dif)
no_zeros <- filter(probs_by_cutoff,residuals>0)
for(j in 1:100) {
score_difs <- append(score_difs,current_score_dif)
for(i in 1:nrow(no_zeros)) {
chance_winning <- append(chance_winning,no_zeros[i,2] * piecewise_predict(
current_score_dif, no_zeros[i,1])
)
}
current_score_dif <- current_score_dif + score_step_size
}
chance_winning <- data.frame(score_difs,chance_winning)
View(chance_winning)
gap_width <- previous_results$score_dif[1]
gap_width <- probs_by_cutoff$score_dif[1]
gap_width <- probs_by_cutoff$cutoffs[1]
gap_width <- probs_by_cutoff$cutoffs[2]
chance_winning <- c()
score_difs <- c()
score_step_size <- (max(previous_results$score_dif)
- min(previous_results$score_dif))/100
current_score_dif <- min(previous_results$score_dif)
no_zeros <- filter(probs_by_cutoff,residuals>0)
for(j in 1:100) {
score_difs <- append(score_difs,current_score_dif)
current_sum <- 0
for(i in 1:nrow(no_zeros)) {
current_sum <- current_sum + no_zeros[i,2] * piecewise_predict(
current_score_dif, no_zeros[i,1])
}
chance_winning <- append(chance_winning,current_sum * probs_by_cutoff$cutoffs[2])
current_score_dif <- current_score_dif + score_step_size
}
chance_winning <- data.frame(score_difs,chance_winning)
view(chance_winning)
chance_winning <- c()
score_difs <- c()
score_step_size <- (max(previous_results$score_dif)
- min(previous_results$score_dif))/1000
current_score_dif <- min(previous_results$score_dif)
no_zeros <- filter(probs_by_cutoff,residuals>0)
for(j in 1:1000) {
score_difs <- append(score_difs,current_score_dif)
current_sum <- 0
for(i in 1:nrow(no_zeros)) {
current_sum <- current_sum + no_zeros[i,2] * piecewise_predict(
current_score_dif, no_zeros[i,1])
}
chance_winning <- append(chance_winning,current_sum * probs_by_cutoff$cutoffs[2])
current_score_dif <- current_score_dif + score_step_size
}
chance_winning <- data.frame(score_difs,chance_winning)
ggplot(chance_winning, aes(x=score_difs, y=chance_winning)) +
geom_point() +
theme_minimal() +
labs(y="Chance of winning (given ovserved dist.)", x="Score difference")
View(previous_results)
score_step_size <- 10^{-1*rounding_places}
# We'll round to 2 decimal places and evaluate integrals with
# subintervals of 0.01, because those are the gradations on the
# score data we have
rounding_places <- 2
score_step_size <- 10^{-1*rounding_places}
confidence_predict <- function(odds_df, input, rounding_places) {
return(odds_df[which(odds_df == round(input,
digits = rounding_places))])
}
confidence_predict <- function(odds_df, input, rounding_places) {
return(odds_df[which(odds_df == round(input,
digits = rounding_places))])
}
confidence_predict(chance_winning,0,2)
confidence_predict <- function(odds, score_difs, input, rounding_places) {
return(odds[score_difs == round(input,
digits = rounding_places)])
}
confidence_predict(chance_winning$chance_winning,chance_winning$score_difs,0,2)
confidence_predict(chance_winning$chance_winning,chance_winning$score_difs,3.1005,2)
rounding_places <- 2
chance_winning <- c()
score_difs <- c()
score_step_size <- 10^{-1*rounding_places}
current_score_dif <- min(previous_results$score_dif)
no_zeros <- filter(probs_by_cutoff,residuals>0)
for(j in 1:ceil((max(previous_results$score_dif)
- min(previous_results$score_dif))/score_step_size)) {
score_difs <- append(score_difs,current_score_dif)
current_sum <- 0
for(i in 1:nrow(no_zeros)) {
current_sum <- current_sum + no_zeros[i,2] * piecewise_predict(
current_score_dif, no_zeros[i,1])
}
chance_winning <- append(chance_winning,current_sum * probs_by_cutoff$cutoffs[2])
current_score_dif <- current_score_dif + score_step_size
}
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/previous results probabilities.R", echo=TRUE)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/previous results probabilities.R", echo=TRUE)
View(chance_winning)
confidence_predict(chance_winning$chance_winning,chance_winning$score_difs,3.1005,2)
confidence_predict <- function(odds, score_difs, input, rounding_places) {
return(odds[score_difs == round(input,
digits = rounding_places)])
}
confidence_predict(chance_winning$chance_winning,chance_winning$score_difs,3.1005,2)
chance_winning$chance_winning[chance_winning$score_difs == 0]
filter(chance_winning,score_difs == 0)
chance_winning$chance_winning[round(chance_winning$score_difs,2) == 0]
confidence_predict <- function(odds, score_difs, input, rounding_places) {
return(odds[round(score_difs,rounding_places)
== round(input, digits = rounding_places)])
}
confidence_predict(chance_winning$chance_winning,chance_winning$score_difs,3.1005,2)
round(score_difs,rounding_places)
chance_winning <- c()
score_difs <- c()
score_step_size <- 10^{-1*rounding_places}
current_score_dif <- min(previous_results$score_dif)
no_zeros <- filter(probs_by_cutoff,residuals>0)
for(j in 1:ceiling((max(previous_results$score_dif)
- min(previous_results$score_dif))/score_step_size)) {
score_difs <- append(score_difs,round(current_score_dif, rounding_places))
current_sum <- 0
for(i in 1:nrow(no_zeros)) {
current_sum <- current_sum + no_zeros[i,2] * piecewise_predict(
current_score_dif, no_zeros[i,1])
}
chance_winning <- append(chance_winning,current_sum * probs_by_cutoff$cutoffs[2])
current_score_dif <- current_score_dif + score_step_size
}
chance_winning <- data.frame(score_difs,chance_winning)
write_csv(chance_winnning,"../PROCESSED_DATA/confidence_win_rates")
write_csv(chance_winnning,"../PROCESSED_DATA/confidence_win_rates")
write_csv(chance_winnning,"../PROCESSED_DATA/confidence_win_rates", row.names = FALSE)
write_csv(chance_winnning,"./PROCESSED_DATA/confidence_win_rates", row.names = FALSE)
write_csv(chance_winnning,"../PROCESSED_DATA/confidence_win_rates")
chance_winning
write_csv(chance_winnning,"./PROCESSED_DATA/confidence_win_rates")
is.data.frame(chance_winning)
a <- chance_winning
write_csv(a,"./PROCESSED_DATA/confidence_win_rates")
write_csv(chance_winnning,"../PROCESSED_DATA/confidence_win_rates")
write_csv(a,"../PROCESSED_DATA/confidence_win_rates")
win_chances <- data.frame(score_difs,chance_winning)
write_csv(win_chances,"../PROCESSED_DATA/confidence_win_rates.csv")
View(chance_winning)
View(win_chances)
win_chances <- chance_winning
#   score_difs <- append(score_difs,round(current_score_dif, rounding_places))
#   current_sum <- 0
#   for(i in 1:nrow(no_zeros)) {
#       current_sum <- current_sum + no_zeros[i,2] * piecewise_predict(
#         current_score_dif, no_zeros[i,1])
#   }
#   chance_winning <- append(chance_winning,current_sum * probs_by_cutoff$cutoffs[2])
#   current_score_dif <- current_score_dif + score_step_size
# }
# win_chances <- data.frame(score_difs,chance_winning)
write_csv(win_chances,"../PROCESSED_DATA/confidence_win_rates.csv")
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:(high - low)/step_size) {
result <- result + step_size * score_dif_density_func(cur_score_dif) *
odds[score_difs == cur_score_dif]
cur_score_dif <- cur_score_dif + step_size
}
}
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,dnorm,rounding_places,-50,50)
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:(high - low)/step_size) {
result <- result + step_size * score_dif_density_func(cur_score_dif) *
odds[score_difs == cur_score_dif]
cur_score_dif <- cur_score_dif + step_size
}
return(results)
}
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:(high - low)/step_size) {
result <- result + step_size * score_dif_density_func(cur_score_dif) *
odds[score_difs == cur_score_dif]
cur_score_dif <- cur_score_dif + step_size
}
return(result)
}
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,dnorm,rounding_places,-50,50)
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:(high - low)/step_size) {
print(score_dif_density_func(cur_score_dif))
result <- result + step_size * score_dif_density_func(cur_score_dif) *
odds[score_difs == cur_score_dif]
cur_score_dif <- cur_score_dif + step_size
}
return(result)
}
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,dnorm,rounding_places,-50,50)
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:(high - low)/step_size) {
print(paste(cur_score_dif,score_dif_density_func(cur_score_dif)))
result <- result + step_size * score_dif_density_func(cur_score_dif) *
odds[score_difs == cur_score_dif]
cur_score_dif <- cur_score_dif + step_size
}
return(result)
}
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,dnorm,rounding_places,-50,50)
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:(high - low)/step_size) {
print(paste(cur_score_dif,score_dif_density_func(cur_score_dif)))
result <- result + step_size * score_dif_density_func(cur_score_dif) *
odds[score_difs == cur_score_dif]
cur_score_dif <- round(cur_score_dif + step_size,rounding_places)
}
return(result)
}
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,dnorm,rounding_places,-50,50)
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:((high - low)/step_size)) {
print(paste(cur_score_dif,score_dif_density_func(cur_score_dif)))
result <- result + step_size * score_dif_density_func(cur_score_dif) *
odds[score_difs == cur_score_dif]
cur_score_dif <- round(cur_score_dif + step_size,rounding_places)
}
return(result)
}
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,dnorm,rounding_places,-50,50)
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:ceiling((high - low)/step_size)) {
print(paste(cur_score_dif,score_dif_density_func(cur_score_dif)))
result <- result + step_size * score_dif_density_func(cur_score_dif) *
odds[score_difs == cur_score_dif]
cur_score_dif <- round(cur_score_dif + step_size,rounding_places)
}
return(result)
}
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,dnorm,rounding_places,-50,50)
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:ceiling((high - low)/step_size)) {
result <- result + step_size * score_dif_density_func(cur_score_dif) *
odds[score_difs == cur_score_dif]
cur_score_dif <- round(cur_score_dif + step_size,rounding_places)
}
return(result)
}
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,dnorm,rounding_places,-50,50)
expected_wins <- function(odds, score_difs, score_func, team_scores,
rounding_places, low, high) {
result <- 0
for(score in team_scores) {
result <- result + distribution_win_chance(
odds, score_difs, score_func - score,
rounding_places, low - score, high - score
)
}
return(result)
}
undefeated_odds <- function(odds, score_difs, score_func, team_scores,
rounding_places, low, high) {
result <- 1
for(score in team_scores) {
result <- result * distribution_win_chance(
odds, score_difs, score_func - score,
rounding_places, low - score, high - score
)
}
return(result)
}
View(match_ups)
View(match_ups)
expected_wins(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},match_ups,rounding_places,-50,50)
match_ups[1,]
match_ups[1,][2:]
match_ups[1,][2:21]
expected_wins(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},match_ups[1,][2:21],rounding_places,-50,50)
expected_wins(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},c(50,75,100),rounding_places,-50,50)
expected_wins <- function(odds, score_difs, score_func, team_scores,
rounding_places, low, high) {
result <- 0
for(score in team_scores) {
result <- result + distribution_win_chance(
odds, score_difs, function(x){score_func(x) - score},
rounding_places, low - score, high - score
)
}
return(result)
}
expected_wins(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},c(50,75,100),rounding_places,-50,50)
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:ceiling((high - low)/step_size)) {
result <- result + step_size * score_dif_density_func(cur_score_dif) *
odds[score_difs == cur_score_dif]
cur_score_dif <- round(cur_score_dif + step_size,rounding_places)
}
print(result)
return(result)
}
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
expected_wins(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},c(50,75,100),rounding_places,-50,50)
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},rounding_places,-50,50)
expected_wins(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},c(50,75,100),rounding_places,-25,120)
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},rounding_places,-25,125)
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},rounding_places,-25,25)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},rounding_places,-25,25)
distribution_win_chance(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},rounding_places,-25,125)
expected_wins(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},c(50,75,100),rounding_places,-25,125)
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:ceiling((high - low)/step_size)) {
result <- result + step_size * score_dif_density_func(cur_score_dif) *
score_dif_density_func(cur_score_dif)
cur_score_dif <- round(cur_score_dif + step_size,rounding_places)
if(result < 0) {
print(paste(cur_score_dif,result,score_dif_density_func(cur_score_dif),
score_dif_density_func(cur_score_dif)))
}
}
print(result)
return(result)
}
expected_wins(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},c(50,75,100),rounding_places,-25,125)
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:ceiling((high - low)/step_size)) {
result <- result + step_size * score_dif_density_func(cur_score_dif) *
score_dif_density_func(cur_score_dif)
cur_score_dif <- round(cur_score_dif + step_size,rounding_places)
if(result < 0 || result >1) {
print(paste(cur_score_dif,result,score_dif_density_func(cur_score_dif),
score_dif_density_func(cur_score_dif)))
}
}
print(result)
return(result)
}
expected_wins(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},c(50,75,100),rounding_places,-25,125)
distribution_win_chance <- function(odds, score_difs, score_dif_density_func,
rounding_places, low, high) {
cur_score_dif <- low
step_size <- 10^{-1*rounding_places}
result <- 0
for(i in 0:ceiling((high - low)/step_size)) {
result <- result + step_size * score_dif_density_func(cur_score_dif) *
confidence_predict(odds,score_difs,cur_score_dif,rounding_places)
cur_score_dif <- round(cur_score_dif + step_size,rounding_places)
if(result < 0 || result >1) {
print(paste(cur_score_dif,result,score_dif_density_func(cur_score_dif),
score_dif_density_func(cur_score_dif)))
}
}
print(result)
return(result)
}
expected_wins(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},c(50,75,100),rounding_places,-25,125)
expected_wins <- function(odds, score_difs, score_func, team_scores,
rounding_places, low, high) {
result <- 0
for(score in team_scores) {
result <- result + distribution_win_chance(
odds, score_difs, function(x){score_func(x + score)},
rounding_places, low - score, high - score
)
}
return(result)
}
expected_wins(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},c(50,75,100),rounding_places,-25,125)
undefeated_chance(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},c(50,75,100),rounding_places,-25,125)
undefeated_odds(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},c(50,75,100),rounding_places,-25,125)
undefeated_odds <- function(odds, score_difs, score_func, team_scores,
rounding_places, low, high) {
result <- 1
for(score in team_scores) {
result <- result * distribution_win_chance(
odds, score_difs, function(x){score_func(x + score)},
rounding_places, low - score, high - score
)
}
return(result)
}
undefeated_odds(win_chances$chance_winning,win_chances$score_difs,function(x){dnorm(x,mean = 50,sd=25)},c(50,75,100),rounding_places,-25,125)
score_func_from_players <- function(player_means, player_sds) {
return(function(x){dnorm(x,mean = mean(player_means),
sd = sqrt(sum(player_sds^2)))})
}
score_func_from_players(c(5,10,60),c(3,6,35))
test <- score_func_from_players(c(5,10,60),c(3,6,35))
View(test)
plot(x,test(x))
x <- [1:100]
x <- 1:100
plot(x,test(x))
mean(5,10,60)
mean(c(5,10,60))
ggplot(win_chances, aes(x=score_difs, y=chance_winning)) +
geom_point() +
theme_minimal() +
labs(y="Chance of winning (given ovserved dist.)", x="Score difference")
# This one shows the winrate in the buckets as a function of score difference:
# (buckets of 5)
# TODO: (fast) Rename the axis on these
ggplot(previous_results_means, aes(x=bucket*5, y=mean, fill=bucket)) +
geom_bar(stat="identity") +
labs(y="Chance of winning", x="Score difference") +
geom_text(aes(label=round(mean, digits=3)), color="green", vjust=-2.5) +
theme_minimal()
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/analysis.R", echo=TRUE)
View(all_games)
lm(`hours of sleep the night before` ~ `# meals on day prior to game`, all_games)
lm(`hours of sleep the night before game` ~ `# meals on day prior to game`, all_games)
lm(`hours of sleep the night before game` ~ `# meals on day prior to game`, data = all_games)
ggplot(data.frame(predict.lm(overallmodel),overallmodel$residuals),
theme_minimal())
ggplot(data.frame(predict.lm(overallmodel),overallmodel$residuals),
aes(x=predict.lm(overallmodel),y=overallmodel$residuals))+
theme_minimal()
## Errors are approximately normal
ggplot(data.frame(overallmodel$residuals), aes(x=overallmodel$residuals)) +
geom_histogram(binwidth=1, color="grey50", fill="lightblue", alpha=0.8) +
theme_minimal() +
stat_function(fun = function(x){dnorm(x,mean = mean(overallmodel$residuals),
sd = sd(overallmodel$residuals))}*length(overallmodel$residuals)*1)
View(all_games)
summary(normalizedmodel)
p_distribution <- read.csv("../PROCESSED_DATA/p_cutoff_distribution_demo.csv")$a
view(p_distribution)
p_distribution <- read.csv("../PROCESSED_DATA/p_cutoff_distribution_demo.csv")
ggplot(data.frame(p_distribution), aes(x=p_distribution)) +
geom_histogram(binwidth=0.5, color="grey50", fill="lightblue", alpha=0.8) +
theme_minimal() +
stat_function(fun = function(x){dnorm(x,mean = mean(p_distribution),
sd = sd(p_distribution))}*length(p_distribution)*0.5) +
geom_vline(xintercept = cutoff)
View(p_distribution)
ggplot(data.frame(p_distribution), aes(x=p_distribution)) +
geom_histogram(binwidth=0.5, color="grey50", fill="lightblue", alpha=0.8) +
theme_minimal() +
stat_function(fun = function(x){dnorm(x,mean = mean(p_distribution$p_distribution),
sd = sd(p_distribution$p_distribution))}*length(p_distribution$p_distribution)*0.5) +
geom_vline(xintercept = cutoff)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/previous results probabilities.R", echo=TRUE)
# Determine if an element matches the specified sport
match_sport <- function(strings, sport){
results <- c()
for(string in strings){
if (string == sport){
results <- c(results, 1)
} else {
results <- c(results, 0)
}
}
return(results)
}
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/previous results probabilities.R", echo=TRUE)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/previous results probabilities.R", echo=TRUE)
