noonized_games$morning <- 0
nooningized_games$evening <- 0
# Remove the players used for east coast/west coast cups
noonized_games <- filter(noonized_games,!(`student label` %in% best_morning))
noonized_games$evening <- 0
# Remove the players used for east coast/west coast cups
noonized_games <- filter(noonized_games,!(`student label` %in% best_morning))
noonized_games <- filter(noonized_games,!(`student label` %in% best_evening))
morningized_games <- filter(noonized_games,!(`student label` %in% best_morning))
morningized_games <- filter(noonized_games,!(`student label` %in% best_evening))
eveningized_games <- filter(noonized_games,!(`student label` %in% best_morning))
eveningized_games <- filter(noonized_games,!(`student label` %in% best_evening))
# Again, we want to remove the effect of the training and strategy sessions
noonized_games$`percent training sessions attended` <- mean(all_games$`percent training sessions attended`)
noonized_games$`# extra strategy sessions attended` <- mean(all_games$`# extra strategy sessions attended`)
noonized_games$`game score` <- predict.lm(overallmodel, noonized_games)
noonized_games$`game score` <- noonized_games$`game score` + noonized_games$residual
adjusted_games <- rbind(noonized_games,morningized_games,eveningized_games)
# Summarize the average of the three by player
all_players <- adjusted_games %>% group_by(`student label`) %>% summarize(
mean = mean(`game score`),
sd = sd(`game score`)
)
# Naively select the best 10, and compare everyone to the 10th best
best_10 <- top_n(all_players,10,mean)
best_10 <- best_10[order(best_10$mean,decreasing = TRUE),]
all_players <- all_players %>% mutate(
chance_better_than_10 = pnorm((mean - best_10$mean[10])/sqrt(sd^2 + best_10$sd[10]^2))
)
# All the remaining players:
ggplot(all_players, aes(x = mean, y = sd)) +
geom_point() +
ggtitle("Players for general season")  +
scale_x_continuous(limits = c(0,60))
# Same, but only the players with a >5% chance of being better
# than the 10th best player on average in over half the games
ggplot(filter(all_players, chance_better_than_10 > 0.22), aes(x = mean, y = sd)) +
geom_point() +
ggtitle("Top cut of players for general season") +
scale_x_continuous(limits = c(0,60))
# Splits the players by standard deviation, the organizes them
# in each SD group by mean, keeping only the 10 best means
bucketed_players <- partition(all_players,"sd","mean",10,10)
# Test how many runs it'll take
a <- numeric(length(bucketed_players))
a[1] <- 10
i <- 0
while(sum(a)==10){
a <- increment_amounts(bucketed_players,a)
i <- i + 1
}
print(paste(i, "runs incoming"))
win_chances <- read_csv("../PROCESSED_DATA/confidence_win_rates.csv")
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
View(all_possible_teams)
View(bucketed_players)
View(bucketed_players[[1]])
View(bucketed_players[[2]])
View(bucketed_players[[3]])
View(bucketed_players[[4]])
View(noonized_games)
# Again, we want to remove the effect of the training and strategy sessions
noonized_games$`percent training sessions attended` <- max(all_games$`percent training sessions attended`)
noonized_games$`# extra strategy sessions attended` <- max(all_games$`# extra strategy sessions attended`)
noonized_games$`game score` <- predict.lm(overallmodel, noonized_games)
noonized_games$`game score` <- noonized_games$`game score` + noonized_games$residual
mean(noonized_games$`game score`)
noonized_games$`percent training sessions attended` <- mean(all_games$`percent training sessions attended`)
noonized_games$`# extra strategy sessions attended` <- mean(all_games$`# extra strategy sessions attended`)
noonized_games$`game score` <- predict.lm(overallmodel, noonized_games)
noonized_games$`game score` <- noonized_games$`game score` + noonized_games$residual
mean(noonized_games$`game score`)
# Create another set for all noon games
noonized_games <- adjusted_games
noonized_games$morning <- 0
noonized_games$evening <- 0
# Remove the players used for east coast/west coast cups
noonized_games <- filter(noonized_games,!(`student label` %in% best_morning))
noonized_games <- filter(noonized_games,!(`student label` %in% best_evening))
morningized_games <- filter(noonized_games,!(`student label` %in% best_morning))
morningized_games <- filter(noonized_games,!(`student label` %in% best_evening))
eveningized_games <- filter(noonized_games,!(`student label` %in% best_morning))
eveningized_games <- filter(noonized_games,!(`student label` %in% best_evening))
# Again, we want to remove the effect of the training and strategy sessions.
# However, because we care about absolute scores, and not relative scores,
# we can't just assign them all to the mean. Instead, it makes more sense
# to assign them to the max: we want our players to be the best, so
# we will send them to as many training and strategy sessions as possible.
noonized_games$`percent training sessions attended` <- mean(all_games$`percent training sessions attended`)
noonized_games$`# extra strategy sessions attended` <- mean(all_games$`# extra strategy sessions attended`)
noonized_games$`game score` <- predict.lm(overallmodel, noonized_games)
noonized_games$`game score` <- noonized_games$`game score` + noonized_games$residual
morningized_games$`percent training sessions attended` <- mean(all_games$`percent training sessions attended`)
morningized_games$`# extra strategy sessions attended` <- mean(all_games$`# extra strategy sessions attended`)
morningized_games$`game score` <- predict.lm(overallmodel, morningized_games)
morningized_games$`game score` <- morningized_games$`game score` + morningized_games$residual
eveningized_games$`percent training sessions attended` <- mean(all_games$`percent training sessions attended`)
eveningized_games$`# extra strategy sessions attended` <- mean(all_games$`# extra strategy sessions attended`)
eveningized_games$`game score` <- predict.lm(overallmodel, eveningized_games)
eveningized_games$`game score` <- eveningized_games$`game score` + eveningized_games$residual
adjusted_games <- rbind(noonized_games,morningized_games,eveningized_games)
# Summarize the average of the three by player
all_players <- adjusted_games %>% group_by(`student label`) %>% summarize(
mean = mean(`game score`),
sd = sd(`game score`)
)
# Naively select the best 10, and compare everyone to the 10th best
best_10 <- top_n(all_players,10,mean)
best_10 <- best_10[order(best_10$mean,decreasing = TRUE),]
all_players <- all_players %>% mutate(
chance_better_than_10 = pnorm((mean - best_10$mean[10])/sqrt(sd^2 + best_10$sd[10]^2))
)
# In order to have a 5% chance of being better than the tenth best
# player in 10 of the 20 games, a player needs to have:
# 20 C 10 * x^10 = 0.05
# x = 0.22
# a 22% chance of being better than the tenth best player on a
# single game.
# All the remaining players:
ggplot(all_players, aes(x = mean, y = sd)) +
geom_point() +
ggtitle("Players for general season")  +
scale_x_continuous(limits = c(0,60))
# Same, but only the players with a >5% chance of being better
# than the 10th best player on average in over half the games
ggplot(filter(all_players, chance_better_than_10 > 0.22), aes(x = mean, y = sd)) +
geom_point() +
ggtitle("Top cut of players for general season") +
scale_x_continuous(limits = c(0,60))
# Splits the players by standard deviation, the organizes them
# in each SD group by mean, keeping only the 10 best means
# Change the first 10 to a 2.5 for a more granular, and 16 hours
# long, calculation
bucketed_players <- partition(all_players,"sd","mean",2.25,10)
# Test how many runs it'll take
a <- numeric(length(bucketed_players))
a[1] <- 10
i <- 0
while(sum(a)==10){
a <- increment_amounts(bucketed_players,a)
i <- i + 1
}
print(paste(i, "runs incoming"))
win_chances <- read_csv("../PROCESSED_DATA/confidence_win_rates.csv")
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
# Create another set for all noon games
noonized_games <- adjusted_games
noonized_games$morning <- 0
# Create another set for all noon games
noonized_games <- all_games
noonized_games$morning <- 0
noonized_games$evening <- 0
# Remove the players used for east coast/west coast cups
noonized_games <- filter(noonized_games,!(`student label` %in% best_morning))
noonized_games <- filter(noonized_games,!(`student label` %in% best_evening))
morningized_games <- filter(noonized_games,!(`student label` %in% best_morning))
morningized_games <- filter(noonized_games,!(`student label` %in% best_evening))
eveningized_games <- filter(noonized_games,!(`student label` %in% best_morning))
eveningized_games <- filter(noonized_games,!(`student label` %in% best_evening))
# Again, we want to remove the effect of the training and strategy sessions.
# However, because we care about absolute scores, and not relative scores,
# we can't just assign them all to the mean. Instead, it makes more sense
# to assign them to the max: we want our players to be the best, so
# we will send them to as many training and strategy sessions as possible.
noonized_games$`percent training sessions attended` <- max(all_games$`percent training sessions attended`)
noonized_games$`# extra strategy sessions attended` <- max(all_games$`# extra strategy sessions attended`)
noonized_games$`game score` <- predict.lm(overallmodel, noonized_games)
noonized_games$`game score` <- noonized_games$`game score` + noonized_games$residual
morningized_games$`percent training sessions attended` <- max(all_games$`percent training sessions attended`)
morningized_games$`# extra strategy sessions attended` <- max(all_games$`# extra strategy sessions attended`)
morningized_games$`game score` <- predict.lm(overallmodel, morningized_games)
morningized_games$`game score` <- morningized_games$`game score` + morningized_games$residual
eveningized_games$`percent training sessions attended` <- max(all_games$`percent training sessions attended`)
eveningized_games$`# extra strategy sessions attended` <- max(all_games$`# extra strategy sessions attended`)
eveningized_games$`game score` <- predict.lm(overallmodel, eveningized_games)
eveningized_games$`game score` <- eveningized_games$`game score` + eveningized_games$residual
adjusted_games <- rbind(noonized_games,morningized_games,eveningized_games)
# Summarize the average of the three by player
all_players <- adjusted_games %>% group_by(`student label`) %>% summarize(
mean = mean(`game score`),
sd = sd(`game score`)
)
# Naively select the best 10, and compare everyone to the 10th best
best_10 <- top_n(all_players,10,mean)
best_10 <- best_10[order(best_10$mean,decreasing = TRUE),]
all_players <- all_players %>% mutate(
chance_better_than_10 = pnorm((mean - best_10$mean[10])/sqrt(sd^2 + best_10$sd[10]^2))
)
# In order to have a 5% chance of being better than the tenth best
# player in 10 of the 20 games, a player needs to have:
# 20 C 10 * x^10 = 0.05
# x = 0.22
# a 22% chance of being better than the tenth best player on a
# single game.
# All the remaining players:
ggplot(all_players, aes(x = mean, y = sd)) +
geom_point() +
ggtitle("Players for general season")  +
scale_x_continuous(limits = c(0,60))
# Same, but only the players with a >5% chance of being better
# than the 10th best player on average in over half the games
ggplot(filter(all_players, chance_better_than_10 > 0.22), aes(x = mean, y = sd)) +
geom_point() +
ggtitle("Top cut of players for general season") +
scale_x_continuous(limits = c(0,60))
# Splits the players by standard deviation, the organizes them
# in each SD group by mean, keeping only the 10 best means
# Change the first 10 to a 2.5 for a more granular, and 16 hours
# long, calculation
bucketed_players <- partition(all_players,"sd","mean",2.25,10)
# Test how many runs it'll take
a <- numeric(length(bucketed_players))
a[1] <- 10
i <- 0
while(sum(a)==10){
a <- increment_amounts(bucketed_players,a)
i <- i + 1
}
print(paste(i, "runs incoming"))
win_chances <- read_csv("../PROCESSED_DATA/confidence_win_rates.csv")
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
bucketed_players <- partition(all_players,"sd","mean",10,10)
# Test how many runs it'll take
a <- numeric(length(bucketed_players))
a[1] <- 10
i <- 0
while(sum(a)==10){
a <- increment_amounts(bucketed_players,a)
i <- i + 1
}
print(paste(i, "runs incoming"))
win_chances <- read_csv("../PROCESSED_DATA/confidence_win_rates.csv")
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
# Please do a write.csv() if you successfully do the 16 hour run
# All the remaining players:
ggplot(all_players, aes(x = mean, y = sd)) +
geom_point() +
ggtitle("Players for general season")  +
scale_x_continuous(limits = c(0,100))
# Same, but only the players with a >5% chance of being better
# than the 10th best player on average in over half the games
ggplot(filter(all_players, chance_better_than_10 > 0.22), aes(x = mean, y = sd)) +
geom_point() +
ggtitle("Top cut of players for general season") +
scale_x_continuous(limits = c(0,100))
View(match_ups)
View(all_players)
players <- all_games %>% group_by(`student label`) %>% summarize(mean = mean(`game score`), sd = sd(`game score`))
View(players)
a <- numeric(length(bucketed_players))
a[1] <- 10
i <- 0
while(i < 168){
print(a <- increment_amounts(bucketed_players,a))
i <- i + 1
}
a <- numeric(length(bucketed_players))
a[1] <- 10
i <- 0
while(sum(a) == 10){
print(a <- increment_amounts(bucketed_players,a))
i <- i + 1
}
i
a <- numeric(length(bucketed_players))
a[1] <- 10
i <- 0
while(!is.null(a)){
print(a <- increment_amounts(bucketed_players,a))
i <- i + 1
}
i
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
View(all_possible_teams)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
all_possible_teams <- NULL
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
View(all_possible_teams)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
all_possible_teams <- bucket_combo_teams(bucketed_players, 4, win_chances$chance_winning,
win_chances$score_difs, match_ups, 0, i)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/helper_functions.R", echo=TRUE)
source("~/Documents/GitHub/Stats191/Stats_191/SCRIPTS/analysis.R", echo=TRUE)
View(all_possible_teams)
# Please do a write.csv() if you successfully do the 16 hour run
write.csv(all_possible_teams, "../PROCESSED_DATA/all_possible_teams.csv")
View(best_10)
best_on_average_teams <- top_n(all_possible_teams,10,avg_wins)
best_undefeated_teams <- top_n(all_possible_teams,10,undefeated_chance)
best_on_average_teams <- best_on_average_teams[sort(best_on_average_teams$avg_wins,
decreasing = TRUE)]
best_undefeated_teams <- best_undefeated_teams[sort(best_undefeated_teams$undefeated_chance,
decreasing = TRUE)]
best_undefeated_teams <- top_n(all_possible_teams,10,undefeated_chance)
best_on_average_teams <- top_n(all_possible_teams,10,avg_wins)
best_on_average_teams <- best_on_average_teams[sort(best_on_average_teams$avg_wins,
decreasing = TRUE),]
best_undefeated_teams <- top_n(all_possible_teams,10,undefeated_chance)
best_undefeated_teams <- best_undefeated_teams[sort(best_undefeated_teams$undefeated_chance,
decreasing = TRUE),]
best_undefeated_teams <- top_n(all_possible_teams,10,undefeated_chance)
best_undefeated_teams <- best_undefeated_teams[sort(best_undefeated_teams$undefeated_chance,
decreasing = TRUE),]
best_undefeated_teams <- top_n(all_possible_teams,10,undefeated_chance)
View(best_on_average_teams)
all_possible_teams <- distinct(all_possible_teams)
View(all_possible_teams)
# 13.5 hour run successfully done and saved here, please don't overwrite
write.csv(all_possible_teams, "../PROCESSED_DATA/all_possible_teams.csv")
best_on_average_teams <- top_n(all_possible_teams,10,avg_wins)
best_on_average_teams <- best_on_average_teams[sort(best_on_average_teams$avg_wins,
decreasing = TRUE),]
best_undefeated_teams <- top_n(all_possible_teams,10,undefeated_chance)
best_undefeated_teams <- best_undefeated_teams[sort(best_undefeated_teams$undefeated_chance,
decreasing = TRUE),]
View(best_on_average_teams)
View(all_possible_teams)
best_on_average_teams <- top_n(all_possible_teams,10,avg_wins)
best_on_average_teams <- best_on_average_teams[sort(best_on_average_teams$avg_wins,
decreasing = TRUE),]
best_on_average_teams <- top_n(all_possible_teams,10,avg_wins)
sort(best_on_average_teams$avg_wins,
decreasing = TRUE)
order(best_on_average_teams$avg_wins,
decreasing = TRUE)
best_on_average_teams <- top_n(all_possible_teams,10,avg_wins)
best_on_average_teams <- best_on_average_teams[order(best_on_average_teams$avg_wins,
decreasing = TRUE),]
View(best_on_average_teams)
best_undefeated_teams <- top_n(all_possible_teams,10,undefeated_chance)
best_undefeated_teams <- best_undefeated_teams[order(best_undefeated_teams$undefeated_chance,
decreasing = TRUE),]
View(best_undefeated_teams)
View(best_on_average_teams)
for(i in 1:nrow(best_on_average_teams)) {
players <- filter(all_players,`student label` %in% best_on_average_teams[i,1:10])
team_pdf <- score_pdf_from_players(players$mean,players$sd)
team_cdf <- score_cdf_from_players(players$mean,players$sd)
results <- success_measures(win_chances$chance_winning, win_chances$score_difs,
team_pdf, team_cdf, match_ups, 2,
mean(players$mean) - num_sd * sqrt(sum(players$sd^2)),
mean(players$mean) + num_sd * sqrt(sum(players$sd^2)))
best_on_average_teams[i,11] <- results[1]
best_on_average_teams[i,12] <- results[2]
}
for(i in 1:nrow(best_on_average_teams)) {
players <- filter(all_players,`student label` %in% best_on_average_teams[i,1:10])
team_pdf <- score_pdf_from_players(players$mean,players$sd)
team_cdf <- score_cdf_from_players(players$mean,players$sd)
results <- success_measures(win_chances$chance_winning, win_chances$score_difs,
team_pdf, team_cdf, match_ups, 2,
mean(players$mean) - 8 * sqrt(sum(players$sd^2)),
mean(players$mean) + 8 * sqrt(sum(players$sd^2)))
best_on_average_teams[i,11] <- results[1]
best_on_average_teams[i,12] <- results[2]
}
for(i in 1:nrow(best_undefeated_teams)) {
players <- filter(all_players,`student label` %in% best_undefeated_teams[i,1:10])
team_pdf <- score_pdf_from_players(players$mean,players$sd)
team_cdf <- score_cdf_from_players(players$mean,players$sd)
results <- success_measures(win_chances$chance_winning, win_chances$score_difs,
team_pdf, team_cdf, match_ups, 2,
mean(players$mean) - 8 * sqrt(sum(players$sd^2)),
mean(players$mean) + 8 * sqrt(sum(players$sd^2)))
best_on_average_teams[i,11] <- results[1]
best_on_average_teams[i,12] <- results[2]
}
for(i in 1:nrow(best_on_average_teams)) {
players <- filter(all_players,`student label` %in% best_on_average_teams[i,1:10])
team_pdf <- score_pdf_from_players(players$mean,players$sd)
team_cdf <- score_cdf_from_players(players$mean,players$sd)
results <- success_measures(win_chances$chance_winning, win_chances$score_difs,
team_pdf, team_cdf, match_ups, 2,
mean(players$mean) - 8 * sqrt(sum(players$sd^2)),
mean(players$mean) + 8 * sqrt(sum(players$sd^2)))
best_on_average_teams[i,11] <- results[1]
best_on_average_teams[i,12] <- results[2]
}
for(i in 1:nrow(best_undefeated_teams)) {
players <- filter(all_players,`student label` %in% best_undefeated_teams[i,1:10])
team_pdf <- score_pdf_from_players(players$mean,players$sd)
team_cdf <- score_cdf_from_players(players$mean,players$sd)
results <- success_measures(win_chances$chance_winning, win_chances$score_difs,
team_pdf, team_cdf, match_ups, 2,
mean(players$mean) - 8 * sqrt(sum(players$sd^2)),
mean(players$mean) + 8 * sqrt(sum(players$sd^2)))
best_undefeated_teams[i,11] <- results[1]
best_undefeated_teams[i,12] <- results[2]
}
View(best_undefeated_teams)
# Notably, the #1 spot doesn't change on this one
best_on_average_teams <- best_on_average_teams[order(best_on_average_teams$avg_wins,
decreasing = TRUE),]
best_undefeated_teams <- best_undefeated_teams[order(best_undefeated_teams$undefeated_chance,
decreasing = TRUE),]
write.csv(best_on_average_teams, "../PROCESSED_DATA/best_on_average_teams.csv")
write.csv(best_undefeated_teams, "../PROCESSED_DATA/best_undefeated_teams.csv")
best_on_average_teams <- top_n(all_possible_teams,30,avg_wins)
best_on_average_teams <- best_on_average_teams[order(best_on_average_teams$avg_wins,
decreasing = TRUE),]
best_undefeated_teams <- top_n(all_possible_teams,30,undefeated_chance)
best_undefeated_teams <- best_undefeated_teams[order(best_undefeated_teams$undefeated_chance,
decreasing = TRUE),]
for(i in 1:nrow(best_on_average_teams)) {
players <- filter(all_players,`student label` %in% best_on_average_teams[i,1:10])
team_pdf <- score_pdf_from_players(players$mean,players$sd)
team_cdf <- score_cdf_from_players(players$mean,players$sd)
results <- success_measures(win_chances$chance_winning, win_chances$score_difs,
team_pdf, team_cdf, match_ups, 2,
mean(players$mean) - 8 * sqrt(sum(players$sd^2)),
mean(players$mean) + 8 * sqrt(sum(players$sd^2)))
best_on_average_teams[i,11] <- results[1]
best_on_average_teams[i,12] <- results[2]
}
# Notably, the #1 spot doesn't change on this one
best_on_average_teams <- best_on_average_teams[order(best_on_average_teams$avg_wins,
decreasing = TRUE),]
best_on_average_teams <- best_on_average_teams[1:10,]
for(i in 1:nrow(best_undefeated_teams)) {
players <- filter(all_players,`student label` %in% best_undefeated_teams[i,1:10])
team_pdf <- score_pdf_from_players(players$mean,players$sd)
team_cdf <- score_cdf_from_players(players$mean,players$sd)
results <- success_measures(win_chances$chance_winning, win_chances$score_difs,
team_pdf, team_cdf, match_ups, 2,
mean(players$mean) - 8 * sqrt(sum(players$sd^2)),
mean(players$mean) + 8 * sqrt(sum(players$sd^2)))
best_undefeated_teams[i,11] <- results[1]
best_undefeated_teams[i,12] <- results[2]
}
best_undefeated_teams <- best_undefeated_teams[order(best_undefeated_teams$undefeated_chance,
decreasing = TRUE),]
best_undefeated_teams <- best_undefeated_teams[1:10,]
write.csv(best_on_average_teams, "../PROCESSED_DATA/best_on_average_teams.csv")
write.csv(best_undefeated_teams, "../PROCESSED_DATA/best_undefeated_teams.csv")
View(match_ups)
View(all_games)
ggplot(all_games, aes(x = `# meals on day prior to game`, y = `game score`)) +
geom_point()
plot(all_games, aes(x = `# meals on day prior to game`, y = `game score`))
plot(all_games, `# meals on day prior to game`, `game score`)
lm(`overall fitness score`~`hours of sleep the night before game` +
night_owl, all_games)
summary(lm(`overall fitness score`~`hours of sleep the night before game` +
night_owl, data = all_games))
summarize(lm(`overall fitness score` ~ `percent training sessions attended`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=all_games))
summarise(lm(`overall fitness score` ~ `percent training sessions attended`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=all_games))
summary(lm(`overall fitness score` ~ `percent training sessions attended`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=all_games))
write.csv(data.frame(best_morning),"../PROCESSED_DATA/west_coast_team.csv")
write.csv(data.frame(best_evening),"../PROCESSED_DATA/east_coast_team.csv")
