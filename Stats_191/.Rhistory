normalized_games <- subset(cbind(normalized_games,predict(normalizedmodel, se.fit = TRUE)) %>%
mutate(residual = `game score` - fit), select = -c(df,residual.scale))
## RESIDUAL PLOTS
# We want to plot the residuals of our model's game score predictions against the
# predictions themselves. Let's extract this from all_games and create a scatterplot.
all_games_residuals <- dplyr::select(all_games, `fit`, `se.fit`, `residual`)
ggplot(all_games_residuals, aes(x = fit, y = residual)) +
geom_point(color = 'red')
normalized_residuals <- dplyr::select(normalized_games, `fit`, `residual`, `se.fit`)
ggplot(normalized_residuals, aes(x = fit, y = residual)) +
geom_point(color = 'blue')
## ARCSIN TRANSFORM #########################################
#############################################################
## BOXCOX ########################################################################
boxcox_all_games <- all_games
# Ensure that all responses (scores) are above zero
boxcox_all_games$`game score` <- boxcox_all_games$`game score` + 0.001
# boxcox() requires a linear model arg lm(), for some reason.
boxcox_overall_model <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=boxcox_all_games)
# Find the optimal lambda
bc <- boxcox(boxcox_overall_model)
lambda <- bc[[1]][which.max(bc[[2]])] # This is the lambda we'll use for Box-Cox
# Transform the scores column
boxcox_all_games$`game score` <- ((boxcox_all_games$`game score`)^(lambda) - 1)/lambda
# Run regression with transformed scores
fin_boxcox_overall_model <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=boxcox_all_games)
# Fit the model and plot residuals
boxcox_all_games <- subset(boxcox_all_games, select =-c(`fit`, `se.fit`, `residual`))
boxcox_all_games <- subset(cbind(boxcox_all_games,predict(fin_boxcox_overall_model, se.fit = TRUE)) %>%
mutate(residual = `game score` - `fit`), select = -c(`df`,`residual.scale`))
# Plot
ggplot(boxcox_all_games, aes(x = fit, y = residual)) +
geom_point(color = 'blue')
ggplot(all_games_residuals, aes(x = fit, y = residual)) +
geom_point(color = 'red')
# Plot
ggplot(boxcox_all_games, aes(x = fit, y = residual)) +
geom_point(color = 'blue')
arcsin_games <- all_games
arcsin_games$`game scores` <- asinh(arcsin_games$`game scores`)
## ARCSIN TRANSFORM #########################################
arcsin_games <- all_games
arcsin_games$`game scores` <- asinh(arcsin_games$`game scores`)
## ARCSIN TRANSFORM #########################################
arcsin_games <- all_games
arcsin_games$`game scores` <- apply(arcsin_games$`game scores`, asinh())
## ARCSIN TRANSFORM #########################################
arcsin_games <- all_games
arcsin_games$`game scores` <- apply(arcsin_games$`game scores`, FUN = asinh())
arcsin_games$`game scores` <- apply(arcsin_games$`game scores`, FUN = asinh)
## ARCSIN TRANSFORM #########################################
arcsin_games <- all_games
arcsin_games$`game scores` <- apply(arcsin_games$`game scores`, FUN = asinh)
# Install packages (uncomment and run when needed)
# install.packages('tidyverse')
# install.packages('haven')
# Libraries and helpers
library(tidyverse)
library(haven)
library(rstudioapi)
# Adjust wd
file_path <- rstudioapi::getSourceEditorContext()$path
setwd(dirname(file_path))
# Import helpers
source("helper_functions.R")
# Import processed data
normalized_games <- read_csv("../PROCESSED_DATA/processed_normalized_all_games.csv")
all_games <- read_csv("../PROCESSED_DATA/processed_all_games.csv")
previous_results <- read_csv("../PROCESSED_DATA/processed_previous_results.csv")
match_ups <- read_csv("../RAW_DATA/season_match_up.csv")
## Preliminary transformations and regressions
# Do regressions on all relevant covariates and add
# the predicted values and residuals into the dataframes
# Because night_owl interacts with the evening and morning variables,
# we need to add extra terms to account for the cross-variable
# interaction - this makes sense, because being a night owl affects
# your performance differently based on the time of day
overallmodel <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=all_games)
summary(overallmodel) # Run lines like this again to see the model
all_games <- subset(cbind(all_games,predict(overallmodel, se.fit = TRUE)) %>%
mutate(residual = `game score` - `fit`), select = -c(`df`,`residual.scale`))
normalizedmodel <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ evening + morning + night_owl,
data=normalized_games)
summary(normalizedmodel)
normalized_games <- subset(cbind(normalized_games,predict(normalizedmodel, se.fit = TRUE)) %>%
mutate(residual = `game score` - fit), select = -c(df,residual.scale))
## RESIDUAL PLOTS
# We want to plot the residuals of our model's game score predictions against the
# predictions themselves. Let's extract this from all_games and create a scatterplot.
all_games_residuals <- dplyr::select(all_games, `fit`, `se.fit`, `residual`)
ggplot(all_games_residuals, aes(x = fit, y = residual)) +
geom_point(color = 'red')
normalized_residuals <- dplyr::select(normalized_games, `fit`, `residual`, `se.fit`)
ggplot(normalized_residuals, aes(x = fit, y = residual)) +
geom_point(color = 'blue')
## ARCSIN TRANSFORM #########################################
arcsin_games <- all_games
arcsin_games$`game scores` <- asinh(arcsin_games$`game scores`)
View(arcsin_games)
View(all_games)
## ARCSIN TRANSFORM #########################################
arcsin_games <- all_games
arcsin_games <- arcsin_games %>% mutate(arcsin_scores = asinh(`game scores`))
## ARCSIN TRANSFORM #########################################
arcsin_games <- all_games
arcsin_games <- arcsin_games %>% mutate(arcsin_scores = asinh(`game score`))
arcsinmodel <- lm(`arcsin_scores` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ evening + morning + night_owl,
+ night_owl * morning + night_owl * evening,
data=arcsin_games)
View(arcsinmodel)
summary(arcsinmodel)
arcsinmodel <- lm(`arcsin_scores` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening
data=arcsin_games)
boxcox_all_games <- all_games
# Ensure that all responses (scores) are above zero
boxcox_all_games$`game score` <- boxcox_all_games$`game score` + 0.001
# boxcox() requires a linear model arg lm(), for some reason.
boxcox_overall_model <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=boxcox_all_games)
# Find the optimal lambda
bc <- boxcox(boxcox_overall_model)
lambda <- bc[[1]][which.max(bc[[2]])] # This is the lambda we'll use for Box-Cox
# Transform the scores column
boxcox_all_games$`game score` <- ((boxcox_all_games$`game score`)^(lambda) - 1)/lambda
# Run regression with transformed scores
fin_boxcox_overall_model <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=boxcox_all_games)
View(fin_boxcox_overall_model)
arcsin_games <- all_games
arcsin_games <- arcsin_games %>% mutate(arcsin_scores = asinh(`game score`))
arcsinmodel <- lm(`arcsin_scores` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening
data=arcsin_games)
## ARCSIN TRANSFORM #########################################
arcsin_games <- all_games
arcsin_games <- arcsin_games %>% mutate(arcsin_scores = asinh(`game score`))
arcsinmodel <- lm(`arcsin_scores` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=arcsin_games)
summary(arcsinmodel)
arcsin_games <- subset(cbind(arcsin_games,predict(arcsinmodel, se.fit = TRUE)) %>%
mutate(residual = `arcsin_scores` - `fit`), select = -c(`df`,`residual.scale`))
arcsin_games <- subset(arcsin_games, select = -c(`fit`, `residual`, `se.fit`))
arcsin_games <- subset(cbind(arcsin_games,predict(arcsinmodel, se.fit = TRUE)) %>%
mutate(residual = `arcsin_scores` - `fit`), select = -c(`df`,`residual.scale`))
ggplot(arcsin_games, aes(x = fit, y = residual)) +
geom_point(aes(color = night_owl))
ggplot(arcsin_games, aes(x = fit, y = residual)) +
geom_point(aes(color = night_owl)) +
scale_color_manual(values = c('red', 'blue')) +
scale_shape_manual() +
guides(color = guide_legend(title = "Night owl", override.aes = list(shape = NA)))
ggplot(arcsin_games, aes(x = fit, y = residual)) +
geom_point(aes(color = night_owl)) +
scale_color_manual(values = c('red', 'blue')) +
guides(color = guide_legend(title = "Night owl", override.aes = list(shape = NA)))
ggplot(arcsin_games, aes(x = fit, y = residual)) +
geom_point(aes(color = night_owl)) +
scale_color_manual(values = c('red', 'blue'))
ggplot(arcsin_games, aes(x = fit, y = residual)) +
geom_point(aes(color = night_owl))
ggplot(arcsin_games, aes(x = fit, y = residual)) +
geom_point(aes(color = night_owl)) +
ggtitle("Residuals of arcsin(score)")
ggplot(arcsin_games, aes(x = fit, y = residual)) +
geom_point(aes(color = night_owl)) +
ggtitle("Residuals of arcsin(score)") +
theme(plot.title = element_text(hjust = 0.5, vjust = 0.5))
# Install packages (uncomment and run when needed)
# install.packages('tidyverse')
# install.packages('haven')
# Libraries and helpers
library(tidyverse)
library(haven)
library(rstudioapi)
# Adjust wd
file_path <- rstudioapi::getSourceEditorContext()$path
setwd(dirname(file_path))
# Import helpers
source("helper_functions.R")
# Import processed data
normalized_games <- read_csv("../PROCESSED_DATA/processed_normalized_all_games.csv")
all_games <- read_csv("../PROCESSED_DATA/processed_all_games.csv")
previous_results <- read_csv("../PROCESSED_DATA/processed_previous_results.csv")
match_ups <- read_csv("../RAW_DATA/season_match_up.csv")
## Preliminary transformations and regressions
# Do regressions on all relevant covariates and add
# the predicted values and residuals into the dataframes
# Because night_owl interacts with the evening and morning variables,
# we need to add extra terms to account for the cross-variable
# interaction - this makes sense, because being a night owl affects
# your performance differently based on the time of day
overallmodel <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=all_games)
summary(overallmodel) # Run lines like this again to see the model
all_games <- subset(cbind(all_games,predict(overallmodel, se.fit = TRUE)) %>%
mutate(residual = `game score` - `fit`), select = -c(`df`,`residual.scale`))
normalizedmodel <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ evening + morning + night_owl,
data=normalized_games)
summary(normalizedmodel)
normalized_games <- subset(cbind(normalized_games,predict(normalizedmodel, se.fit = TRUE)) %>%
mutate(residual = `game score` - fit), select = -c(df,residual.scale))
## RESIDUAL PLOTS
# We want to plot the residuals of our model's game score predictions against the
# predictions themselves. Let's extract this from all_games and create a scatterplot.
all_games_residuals <- dplyr::select(all_games, `fit`, `se.fit`, `residual`)
ggplot(all_games_residuals, aes(x = fit, y = residual)) +
geom_point(color = 'red')
normalized_residuals <- dplyr::select(normalized_games, `fit`, `residual`, `se.fit`)
ggplot(normalized_residuals, aes(x = fit, y = residual)) +
geom_point(color = 'blue')
## ARCSIN TRANSFORM #########################################
arcsin_games <- all_games
arcsin_games <- arcsin_games %>% mutate(arcsin_scores = asinh(`game score`))
arcsinmodel <- lm(`arcsin_scores` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=arcsin_games)
summary(arcsinmodel)
arcsin_games <- subset(arcsin_games, select = -c(`fit`, `residual`, `se.fit`))
arcsin_games <- subset(cbind(arcsin_games,predict(arcsinmodel, se.fit = TRUE)) %>%
mutate(residual = `arcsin_scores` - `fit`), select = -c(`df`,`residual.scale`))
png("../OUTPUTS/arcsin_residuals.png")
ggplot(arcsin_games, aes(x = fit, y = residual)) +
geom_point(aes(color = night_owl)) +
ggtitle("Residuals of arcsin(score)") +
theme(plot.title = element_text(hjust = 0.5, vjust = 0.5))
dev.off()
#############################################################
## BOXCOX ########################################################################
boxcox_all_games <- all_games
# Ensure that all responses (scores) are above zero
boxcox_all_games$`game score` <- boxcox_all_games$`game score` + 0.001
# boxcox() requires a linear model arg lm(), for some reason.
boxcox_overall_model <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=boxcox_all_games)
# Find the optimal lambda
bc <- boxcox(boxcox_overall_model)
lambda <- bc[[1]][which.max(bc[[2]])] # This is the lambda we'll use for Box-Cox
# Transform the scores column
boxcox_all_games$`game score` <- ((boxcox_all_games$`game score`)^(lambda) - 1)/lambda
# Run regression with transformed scores
fin_boxcox_overall_model <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=boxcox_all_games)
# Fit the model and plot residuals
boxcox_all_games <- subset(boxcox_all_games, select =-c(`fit`, `se.fit`, `residual`))
boxcox_all_games <- subset(cbind(boxcox_all_games,predict(fin_boxcox_overall_model, se.fit = TRUE)) %>%
mutate(residual = `game score` - `fit`), select = -c(`df`,`residual.scale`))
png("../OUTPUTS/boxcox_residuals.png")
# Plot
ggplot(boxcox_all_games, aes(x = fit, y = residual)) +
geom_point(color = 'blue')
dev.off()
# Plot
ggplot(boxcox_all_games, aes(x = fit, y = residual)) +
geom_point(color = 'blue')
# Plot
ggplot(boxcox_all_games, aes(x = fit, y = residual)) +
geom_point(color = 'blue') +
ggtitle("Box-Cox Residuals") +
theme(plot.title = element_text(hjust = 0.5, vjust = 0.5))
dev.off()
png("../OUTPUTS/boxcox_residuals.png")
# Plot
ggplot(boxcox_all_games, aes(x = fit, y = residual)) +
geom_point(color = 'blue') +
ggtitle("Box-Cox Residuals") +
theme(plot.title = element_text(hjust = 0.5, vjust = 0.5))
dev.off()
png("../OUTPUTS/boxcox_residuals.png")
# Plot
ggplot(boxcox_all_games, aes(x = fit, y = residual)) +
geom_point(aes(color = night_owl)) +
ggtitle("Box-Cox Residuals") +
theme(plot.title = element_text(hjust = 0.5, vjust = 0.5))
dev.off()
png("../OUTPUTS/boxcox_residuals.png")
# Plot
ggplot(boxcox_all_games, aes(x = fit, y = residual)) +
geom_point(aes(color = night_owl)) +
ggtitle("Box-Cox Residuals") +
theme(plot.title = element_text(hjust = 0.5, vjust = 0.5))
# Plot
ggplot(boxcox_all_games, aes(x = fit, y = residual)) +
geom_point(aes(color = night_owl)) +
ggtitle("Box-Cox Residuals") +
theme(plot.title = element_text(hjust = 0.5, vjust = 0.5))
all_games_residuals <- dplyr::select(all_games, `fit`, `se.fit`, `residual`)
ggplot(all_games_residuals, aes(x = fit, y = residual)) +
geom_point(color = 'red')
all_games_residuals <- dplyr::select(all_games, `fit`, `se.fit`, `residual`)
ggplot(all_games_residuals, aes(x = fit, y = residual)) +
geom_point(color = 'red')
# Install packages (uncomment and run when needed)
# install.packages('tidyverse')
# install.packages('haven')
# Libraries and helpers
library(tidyverse)
library(haven)
library(rstudioapi)
# Adjust wd
file_path <- rstudioapi::getSourceEditorContext()$path
setwd(dirname(file_path))
# Import helpers
source("helper_functions.R")
# Import processed data
normalized_games <- read_csv("../PROCESSED_DATA/processed_normalized_all_games.csv")
all_games <- read_csv("../PROCESSED_DATA/processed_all_games.csv")
previous_results <- read_csv("../PROCESSED_DATA/processed_previous_results.csv")
match_ups <- read_csv("../RAW_DATA/season_match_up.csv")
## Preliminary transformations and regressions
# Do regressions on all relevant covariates and add
# the predicted values and residuals into the dataframes
# Because night_owl interacts with the evening and morning variables,
# we need to add extra terms to account for the cross-variable
# interaction - this makes sense, because being a night owl affects
# your performance differently based on the time of day
overallmodel <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=all_games)
summary(overallmodel) # Run lines like this again to see the model
all_games <- subset(cbind(all_games,predict(overallmodel, se.fit = TRUE)) %>%
mutate(residual = `game score` - `fit`), select = -c(`df`,`residual.scale`))
normalizedmodel <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ evening + morning + night_owl,
data=normalized_games)
summary(normalizedmodel)
normalized_games <- subset(cbind(normalized_games,predict(normalizedmodel, se.fit = TRUE)) %>%
mutate(residual = `game score` - fit), select = -c(df,residual.scale))
## RESIDUAL PLOTS
# We want to plot the residuals of our model's game score predictions against the
# predictions themselves. Let's extract this from all_games and create a scatterplot.
all_games_residuals <- dplyr::select(all_games, `fit`, `se.fit`, `residual`)
ggplot(all_games_residuals, aes(x = fit, y = residual)) +
geom_point(color = 'red')
normalized_residuals <- dplyr::select(normalized_games, `fit`, `residual`, `se.fit`)
ggplot(normalized_residuals, aes(x = fit, y = residual)) +
geom_point(color = 'blue')
## ARCSIN TRANSFORM #########################################
arcsin_games <- all_games
arcsin_games <- arcsin_games %>% mutate(arcsin_scores = asinh(`game score`))
arcsinmodel <- lm(`arcsin_scores` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=arcsin_games)
summary(arcsinmodel)
arcsin_games <- subset(arcsin_games, select = -c(`fit`, `residual`, `se.fit`))
arcsin_games <- subset(cbind(arcsin_games,predict(arcsinmodel, se.fit = TRUE)) %>%
mutate(residual = `arcsin_scores` - `fit`), select = -c(`df`,`residual.scale`))
png("../OUTPUTS/arcsin_residuals.png")
ggplot(arcsin_games, aes(x = fit, y = residual)) +
geom_point(aes(color = night_owl)) +
ggtitle("Residuals of arcsin(score)") +
theme(plot.title = element_text(hjust = 0.5, vjust = 0.5))
dev.off()
## BOXCOX ########################################################################
boxcox_all_games <- all_games
# Ensure that all responses (scores) are above zero
boxcox_all_games$`game score` <- boxcox_all_games$`game score` + 0.001
# boxcox() requires a linear model arg lm(), for some reason.
boxcox_overall_model <- lm(`game score` ~ `percent training sessions attended`
+ `overall fitness score`
+ `# extra strategy sessions attended`
+ `hours of sleep the night before game`
+ `# meals on day prior to game`
+ `university year`
+ `curling` + `gymnastics` + `baseball` + `martial_arts`
+ `frisbee` + `table_tennis` + `basketball`
+ evening + morning + night_owl
+ night_owl * morning + night_owl * evening,
data=boxcox_all_games)
# Find the optimal lambda
bc <- boxcox(boxcox_overall_model)
lambda <- bc[[1]][which.max(bc[[2]])] # This is the lambda we'll use for Box-Cox
all_games_residuals <- dplyr::select(all_games, `fit`, `se.fit`, `residual`)
ggplot(all_games_residuals, aes(x = fit, y = residual)) +
geom_point(color = 'red')
